---
import { excerpt } from "../utils/excerpt";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { DEFAULT_LANG } from "../config.i18n";
import { postPath } from "../utils/urls";
import { formatLongDate } from "../utils/date";
import { getReadingTime } from "../utils/readingTime";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCalendarDays } from "@fortawesome/free-solid-svg-icons";
type ListPost = { id: string; body: string; data: { title: string; description?: string; date: Date; ogImage?: string | ImageMetadata; tags?: string[] } };
const { posts, id, lang } = Astro.props;
const truncate = (value: unknown, max: number = 160): string => {
  const s = String(value ?? "");
  return s.length > max ? s.slice(0, max).trimEnd() + "…" : s;
};
---

<div id={id} class="prose max-w-none mt-6 space-y-4 dark:prose-invert">
  {
    posts.map((post: ListPost) => (
      <div class="mb-8 flex flex-col items-start gap-4 sm:flex-row">
        {post.data.ogImage &&
          (typeof post.data.ogImage === "object" &&
          "src" in post.data.ogImage ? (
            <a
              href={postPath(lang ?? DEFAULT_LANG, post.id)}
              class="not-prose block flex-shrink-0 self-center pt-2 leading-none sm:self-start"
            >
              <Image
                src={post.data.ogImage}
                alt={post.data.title}
                width={120}
                height={120}
                quality={90}
                class="h-30 w-30 rounded object-cover"
              />
            </a>
          ) : (
            <a
              href={postPath(lang ?? DEFAULT_LANG, post.id)}
              class="not-prose block flex-shrink-0 self-center pt-2 leading-none sm:self-start"
            >
              <img
                src={post.data.ogImage as string}
                alt={post.data.title}
                class="h-30 w-30 rounded object-cover"
              />
            </a>
          ))}
        <div>
          <a
            href={postPath(lang ?? DEFAULT_LANG, post.id)}
            class="not-prose post-list-title"
          >
            {post.data.title}
          </a>
          <p class="mt-[5px] flex items-center gap-1 post-meta opacity-60">
            <FontAwesomeIcon icon={faCalendarDays} className="h-4 w-4" />
            {formatLongDate(post.data.date, lang)} • {getReadingTime(post.body, lang)}
          </p>
          <p class="prose-lg text-justify text-muted-content sm:text-left">
            {truncate(post.data.description ?? excerpt(post.body), 160)}
          </p>
        </div>
      </div>
    ))
  }
</div>
